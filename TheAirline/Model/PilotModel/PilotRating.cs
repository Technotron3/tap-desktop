using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;
using System.Threading.Tasks;
using TheAirline.Model.GeneralModel;

namespace TheAirline.Model.PilotModel
{
    //the class for the rating for a pilot
     [Serializable]
    public class PilotRating : ISerializable, IComparable<PilotRating>
    {
       [Versioning("name")]
       public string Name { get; set; }
       [Versioning("trainingdays")]
       public int TrainingDays { get; set; }
       [Versioning("costindex")]
       public int CostIndex { get; set; }
         [Versioning("trainingaircrafts")]
       public List<TrainingAircraftType> Aircrafts { get; set; }
       public PilotRating(string name, int trainingdays,int costindex)
       {
           this.Name = name;
           this.TrainingDays = trainingdays;
           this.CostIndex = costindex;
           this.Aircrafts = new List<TrainingAircraftType>();
       }
         //adds a training aircraft which the rating (pilot) uses in training
       public void addAircraft(TrainingAircraftType aircraft)
       {
           this.Aircrafts.Add(aircraft);
       }
        private PilotRating(SerializationInfo info, StreamingContext ctxt)
        {
            int version = info.GetInt16("version");

            var fields = this.GetType().GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public).Where(p => p.GetCustomAttribute(typeof(Versioning)) != null);

            IList<PropertyInfo> props = new List<PropertyInfo>(this.GetType().GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public).Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            var propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (SerializationEntry entry in info)
            {
                MemberInfo prop = propsAndFields.FirstOrDefault(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Name == entry.Name);


                if (prop != null)
                {
                    if (prop is FieldInfo)
                        ((FieldInfo)prop).SetValue(this, entry.Value);
                    else
                        ((PropertyInfo)prop).SetValue(this, entry.Value);
                }
            }

            var notSetProps = propsAndFields.Where(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Version > version);

            foreach (MemberInfo notSet in notSetProps)
            {
                Versioning ver = (Versioning)notSet.GetCustomAttribute(typeof(Versioning));

                if (ver.AutoGenerated)
                {
                    if (notSet is FieldInfo)
                        ((FieldInfo)notSet).SetValue(this, ver.DefaultValue);
                    else
                        ((PropertyInfo)notSet).SetValue(this, ver.DefaultValue);

                }

            }

        }

        public void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.AddValue("version", 1);

            Type myType = this.GetType();

            var fields = myType.GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public).Where(p => p.GetCustomAttribute(typeof(Versioning)) != null);

            IList<PropertyInfo> props = new List<PropertyInfo>(myType.GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public).Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            var propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (MemberInfo member in propsAndFields)
            {
                object propValue;

                if (member is FieldInfo)
                    propValue = ((FieldInfo)member).GetValue(this);
                else
                    propValue = ((PropertyInfo)member).GetValue(this, null);

                Versioning att = (Versioning)member.GetCustomAttribute(typeof(Versioning));

                info.AddValue(att.Name, propValue);
            }

        }

        public int CompareTo(PilotRating other)
        {
            return this.CostIndex.CompareTo(other.CostIndex);
        }
    }
    //the list of pilot ratings
    public class PilotRatings
    {
        private static List<PilotRating> ratings = new List<PilotRating>();
        //adds a rating to the list
        public static void AddRating(PilotRating rating)
        {
            ratings.Add(rating);
        }
        //returns the rating with a name
        public static PilotRating GetRating(string name)
        {
            return ratings.FirstOrDefault(r => r.Name == name);
        }
        //returns the list of ratings 
        public static List<PilotRating> GetRatings()
        {
            return ratings;
        }
        //clears the pilot ratings
        public static void Clear()
        {
            ratings = new List<PilotRating>();
        }
    }
}
