using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;
using System.Threading.Tasks;
using TheAirline.Model.GeneralModel;

namespace TheAirline.Model.AirlinerModel
{
    //the class for an engine type 
    [Serializable]
    public class EngineType : ISerializable
    {
        public enum TypeOfEngine { Jet, Turboprop }
        public enum NoiseLevel { High, Medium, Low }
         [Versioning("noise")]
        public NoiseLevel Noise { get; set; }
         [Versioning("engine")]
        public TypeOfEngine Engine { get; set; }
         [Versioning("model")]
        public string Model { get; set; }
         [Versioning("manufacturer")]
        public string Manufacturer { get; set; }
         [Versioning("produced")]
        public Period<int> Produced { get; set; }
         [Versioning("speed")]
        public int MaxSpeed { get; set; }
         [Versioning("runway")]
        public double RunwayModifier { get; set; }
         [Versioning("range")]
        public double RangeModifier { get; set; }
         [Versioning("consumptation")]
        public double ConsumptationModifier { get; set; }
         [Versioning("ceiling")]
        public int Ceiling { get; set; }
         [Versioning("price")]
        public long Price { get; set; }
         [Versioning("types")]
        public List<AirlinerType> Types { get; set; }
        public EngineType(string model, string manufacturer, TypeOfEngine engine, NoiseLevel noise, double consumptation, long price, int maxspeed, int ceiling, double runway, double range, Period<int> produced)
        {
            this.Model = model;
            this.Manufacturer = manufacturer;
            this.Engine = engine;
            this.ConsumptationModifier = consumptation;
            this.Price = price;
            this.MaxSpeed = maxspeed;
            this.Ceiling = ceiling;
            this.RunwayModifier = runway;
            this.RangeModifier = range;
            this.Produced = produced;
            this.Types = new List<AirlinerType>();
        }
        //adds an airliner type which fits this engine
        public void addAirlinerType(AirlinerType type)
        {
            this.Types.Add(type);
        }
              private EngineType(SerializationInfo info, StreamingContext ctxt)
        {
            int version = info.GetInt16("version");

            var fields = this.GetType().GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public).Where(p => p.GetCustomAttribute(typeof(Versioning)) != null);

            IList<PropertyInfo> props = new List<PropertyInfo>(this.GetType().GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public).Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            var propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (SerializationEntry entry in info)
            {
                MemberInfo prop = propsAndFields.FirstOrDefault(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Name == entry.Name);


                if (prop != null)
                {
                    if (prop is FieldInfo)
                        ((FieldInfo)prop).SetValue(this, entry.Value);
                    else
                        ((PropertyInfo)prop).SetValue(this, entry.Value);
                }
            }

            var notSetProps = propsAndFields.Where(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Version > version);

            foreach (MemberInfo notSet in notSetProps)
            {
                Versioning ver = (Versioning)notSet.GetCustomAttribute(typeof(Versioning));

                if (ver.AutoGenerated)
                {
                    if (notSet is FieldInfo)
                        ((FieldInfo)notSet).SetValue(this, ver.DefaultValue);
                    else
                        ((PropertyInfo)notSet).SetValue(this, ver.DefaultValue);

                }

            }
        }

        public void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.AddValue("version", 1);

            Type myType = this.GetType();

            var fields = myType.GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public).Where(p => p.GetCustomAttribute(typeof(Versioning)) != null);

            IList<PropertyInfo> props = new List<PropertyInfo>(myType.GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public).Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            var propsAndFields = props.Cast<MemberInfo>().Union(fields.Cast<MemberInfo>());

            foreach (MemberInfo member in propsAndFields)
            {
                object propValue;

                if (member is FieldInfo)
                    propValue = ((FieldInfo)member).GetValue(this);
                else
                    propValue = ((PropertyInfo)member).GetValue(this, null);

                Versioning att = (Versioning)member.GetCustomAttribute(typeof(Versioning));

                info.AddValue(att.Name, propValue);
            }


        }
    

    }
    //the list of engine types
    public class EngineTypes
    {
        private static List<EngineType> types = new List<EngineType>();
        //adds an engine type to the list
        public static void AddEngineType(EngineType type)
        {
            types.Add(type);
        }
        //returns the list of engine types
        public static List<EngineType> GetEngineTypes()
        {
            return types;
        }
        //returns the list of engine types for an airliner type
        public static List<EngineType> GetEngineTypes(AirlinerType type)
        {
            return types.FindAll(t => t.Types.Contains(type));
        }
    }
}
